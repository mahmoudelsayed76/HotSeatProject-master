@using System.IO;
@using System.Diagnostics;
@inject IFileReaderService fileReaderService
@inject IJSRuntime CurrentJSRuntime


<div class="row align-items-center justify-content-center">
    <div class="col-md-6  ibox-content text-center">
        <div class="ibox ">
            <div class="ibox-title">
                <h5>Video window</h5>
            </div>
            <div class="ibox-content">
                <figure>
                    <video width="320" height="240" id="uploadedVideo" controls>

                        <source src="@videoSource" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                    <div>
                        <input type="file" @ref=inputElement />

                        <button @onclick=ReadFile class="btn btn-primary">Upload file</button>
                        <button @onclick=ClearFile class="btn btn-primary">Clear</button>
                    </div>
                    <progress max="@max" value="@progress" />
                </figure>
            </div>
        </div>
    </div>
</div>
<div class="row align-items-center justify-content-center">
    <div class="col-md-6  ibox-content text-center">
<textarea style="max-width: 100%;display:@progressDisplay" cols="50" rows="20">@Output</textarea>
    </div>
</div>
@code {

    [Parameter]
    public int BufferSize { get; set; } = 20480;

    [Parameter]
    public bool DisplayProgress
    {
        get
        {
            return (progressDisplay == "block");
        }

        set
        {
            progressDisplay = value ? "block" : "none";
        }
    }

    public long max;
    public long progress;
    ElementReference inputElement;
    ElementReference buttoninputElement;

    string progressDisplay { get; set; } = "block";
    string videoSource { get; set; } = null;

    string Output { get; set; }

    public async Task ClearFile()
    {
        await fileReaderService.CreateReference(inputElement).ClearValue();
        progress = 0;
    }

    public async Task ReadFile()
    {
        max = 0;
        progress = 0;
        Output = string.Empty;
        this.StateHasChanged();
        var nl = Environment.NewLine;
        var files = (await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync()).ToList();
        foreach (var file in files)
        {
            max += (await file.ReadFileInfoAsync()).Size;
        }
        foreach (var file in files)
        {
            var stopwatch = new Stopwatch();
            stopwatch.Start();
            var fileInfo = await file.ReadFileInfoAsync();
            Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Name)}: {fileInfo.Name}{nl}";
            Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Size)}: {fileInfo.Size}{nl}";
            Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Type)}: {fileInfo.Type}{nl}";
            Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.LastModifiedDate)}: {fileInfo.LastModifiedDate?.ToString() ?? "(N/A)"}{nl}";
            foreach (string property in fileInfo.NonStandardProperties.Keys)
            {
                Output += $"{nameof(IFileInfo)}.{property} (nonstandard): {fileInfo.NonStandardProperties[property]}{nl}";
            }
            Output += $"Reading file...";
            this.StateHasChanged();
            Console.WriteLine(Output);
            using (var fs = await file.OpenReadAsync())
            {
                var buffer = new byte[BufferSize];
                int count;
                var lastAnnounce = 0m;
                while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
                {
                    this.progress += count;
                    var progress = ((decimal)fs.Position * 100) / fs.Length;
                    if (progress > (lastAnnounce + 10))
                    {
                        stopwatch.Stop();
                        Output += $"Read {count} bytes ({progress:00}%). {fs.Position} / {fs.Length}{nl}";
                        await InvokeAsync(StateHasChanged);
                        await Task.Delay(1);
                        lastAnnounce = progress;
                        stopwatch.Start();
                    }
                }
                stopwatch.Stop();

                Output += $"Done reading file {fileInfo.Name} - {fs.Length} bytes in {stopwatch.ElapsedMilliseconds}ms.{nl}.";

                // write the file somewhere
                string savedFile = await SaveFile(fs, fileInfo.Name);
                if (string.IsNullOrEmpty(savedFile))
                    Output += $"Error Saving File! ";
                else
                {
                    Output += $"File Saved to {savedFile}";
                    videoSource = Path.GetFileName(savedFile);
                    Output += $"Video Source = {videoSource}";
                    await CurrentJSRuntime.InvokeVoidAsync("loadVideo", "uploadedVideo", videoSource);
                }

            }

            this.StateHasChanged();
        }
    }

    async Task<string> SaveFile(AsyncDisposableStream fs, string destFileName)
    {
        string retFile = null;
        try
        {
            var wwwroot = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot");
            destFileName = Path.Combine(wwwroot, destFileName);

            // write the file somewhere
            using (var outFile = File.Create(destFileName))
            {

                fs.Seek(0, SeekOrigin.Begin);
                await fs.CopyToAsync(outFile).ConfigureAwait(false);
                outFile.Close();
                retFile = outFile.Name;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: {ex}", ex.Message);
        }
        return retFile;
    }
   
}
